{"version":3,"sources":["assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/john.png","assets/images/mark.png","assets/images/mary.png","employees/ListEmployees.js","App.js","serviceWorker.js","index.js"],"names":["map","./john.png","./mark.png","./mary.png","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","images","r","item","index","replace","importAll","require","ListEmployees","react_default","a","createElement","this","props","employees","employee","className","key","name","src","photoPath","gender","contactPreference","Moment","dateOfBirth","format","phoneNumber","email","department","isActive","toString","Component","Date","App","src_employees_ListEmployees","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da71729c.chunk.js","sourcesContent":["var map = {\n\t\"./john.png\": 23,\n\t\"./mark.png\": 24,\n\t\"./mary.png\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 22;","module.exports = __webpack_public_path__ + \"static/media/john.2d9f64bb.png\";","module.exports = __webpack_public_path__ + \"static/media/mark.7d951de6.png\";","module.exports = __webpack_public_path__ + \"static/media/mary.6a8df8e0.png\";","import React, { Component } from 'react';\r\nimport Moment from 'moment';\r\nimport './ListEmployees.css';\r\n\r\nfunction importAll(r) {\r\n  let images = {};\r\n  r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\r\n  return images;\r\n}\r\n\r\nconst images = importAll(require.context('../assets/images/', false, /\\.(png|jpe?g|svg)$/));\r\n\r\nclass ListEmployees extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.employees.map(employee =>(\r\n          <div className=\"panel panel-primary\" key={employee.id}>\r\n            <div className=\"panel-heading\">\r\n              <h3 className=\"panel-title\">{employee.name}</h3>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n              <div className=\"col-xs-10\">\r\n                <div className=\"row vertical-align\">\r\n                  <div className=\"col-xs-4\">\r\n                    <img className=\"imageClass\" src={images[employee.photoPath]} />\r\n                  </div>\r\n\r\n                  <div className=\"col-xs-8\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Gender\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.gender}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Contact Preference\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.contactPreference}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Date of Birth\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {Moment(employee.dateOfBirth).format('MMM d, Y')}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Contact Preference\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.contactPreference}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Phone\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.phoneNumber}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Email\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.email}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Department\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.department}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-xs-6\">\r\n                        Is Active\r\n                      </div>\r\n                      <div className=\"col-xs-6\">\r\n                        : {employee.isActive.toString()}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListEmployees;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListEmployees from './employees/ListEmployees';\n\nconst employees = [\n{\n  id: 1,\n  name: 'Mark',\n  gender: 'Male',\n  contactPreference: 'Email',\n  email: 'mark@pragimtech.com',\n  dateOfBirth: new Date('10/25/1988'),\n  department: 'IT',\n  isActive: true,\n  photoPath: 'mark.png'\n},\n{\n  id: 2,\n  name: 'Mary',\n  gender: 'Female',\n  contactPreference: 'Phone',\n  phoneNumber: 2345978640,\n  dateOfBirth: new Date('11/20/1979'),\n  department: 'HR',\n  isActive: true,\n  photoPath: 'mary.png'\n},\n{\n  id: 3,\n  name: 'John',\n  gender: 'Male',\n  contactPreference: 'Phone',\n  phoneNumber: 5432978640,\n  dateOfBirth: new Date('3/25/1976'),\n  department: 'IT',\n  isActive: false,\n  photoPath: 'john.png'\n}]\n\nclass App extends Component {\n  render() {\n    return (\n      <ListEmployees employees={employees}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}